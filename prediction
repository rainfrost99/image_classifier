def process_image(image):
    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''
    
    # TODO: Process a PIL image for use in a PyTorch model
    im = Image.open(image)
    im.thumbnail((256, 256))
    
    width, height = im.size
    #print('width: ', width) 
    #print('height: ', height)
    
    left = (width - 224)/2
    top = (height - 224)/2
    right = left + 224
    bottom = top + 224
    
    '''
    print('left: ', left)
    print('right: ', right)
    print('top: ', top)
    print('bottom: ', bottom)
    print()
    '''
    
    im = im.crop((left, top, right, bottom))
    
    np_image = np.array(im) / 255
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    np_image = (np_image - mean) / std
    #print('orig shape: ', np_image.shape)
    
    # Transpose to put colour channel first
    np_image = np_image.transpose((2, 0, 1))
    image = torch.from_numpy(np_image)
    #print('transposed shape: ', image.shape)
        
    return image

image = process_image(test_dir + '/10/image_07117.jpg')



device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

def predict(image_path, model):
    
    #Predict the class (or classes) of an image using a trained deep learning model.
    model.to('cpu')
    image = process_image(image_path)
    image.unsqueeze_(0)
    model.eval()
    
    with torch.no_grad():
        ps = model.forward(image)
        ps = torch.exp(ps)        
        top_p, top_class = ps.topk(1, dim=1)
        
    return top_p, top_class
    
top_p, top_class = predict(test_dir + '/1/image_06743.jpg', model)
print(top_p, top_class)
